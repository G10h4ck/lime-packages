#!/usr/bin/env lua
--[[
Copyright 2018 Marcos Gutierrez <gmarcos87@gmail.com>
Copyright 2021 Santiago Piccinini <spiccinini@altermundi.net>
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-3.0
]]--

local ubus = require "ubus"
local json = require 'luci.jsonc'
local uci = require 'uci'
local vouchera = require('voucher.vouchera')
local utils = require('lime.utils')

vouchera.init()

local uci_cursor = uci.cursor()

local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end

local function status(msg)
    local output = logic.iptables_status()
    utils.printJson(output)
end

local function enable(msg)
    uci_cursor:set("pirania", "base_config", "enabled", "1")
    uci_cursor:commit("pirania")
    utils.unsafe_shell("captive-portal start")
    utils.printJson({ status = "ok" })
end

local function disable(msg)
    uci_cursor:set("pirania", "base_config", "enabled", "0")
    uci_cursor:commit("pirania")
    utils.unsafe_shell("captive-portal stop")
    utils.printJson({ status = "ok" })
end


local function show_url(msg)
    utils.printJson({ status = 'ok', url = uci_cursor:get("pirania", "base_config", "portal_url") });
end

local function change_url(msg)
    local url = msg.url
    uci_cursor:set("pirania", "base_config", "portal_url", url)
    uci_cursor:commit("pirania")
    utils.printJson({status = 'ok', url = url});
end


local function add_vouchers(msg)
    local vouchers, errmsg = vouchera.create(msg.name, msg.qty, msg.duration_m,
                                             msg.activation_deadline, msg.permanent)
    if vouchers then
        return utils.printJson({ status = 'ok', vouchers = vouchers})
    else
        return utils.printJson({ status = 'error', message = errmsg})
    end
end

local function rename(msg)
    local voucher = vouchera.rename(msg.id, msg.name)
    return utils.printJson({ status = voucher and 'ok' or 'error' })
end


local function list_vouchers(msg)
    local vouchers = vouchera.list()
    return utils.printJson({ status = vouchers and 'ok' or 'error', vouchers = vouchers })
end


local methods = {
  status = { no_params = 0 },
  enable = { no_params = 0 },
  disable = { no_params = 0 },
  show_url = { no_params = 0 },
  change_url = { url = 'value' },
  add_vouchers = { name='str', qty='int', duration_m='int', activation_deadline='timestamp', permanent='bool'},
  list_vouchers = { no_params = 0 },
  rename = { id = 'str', name = 'str' },
}

if arg[1] == 'list' then
    utils.printJson(methods)
end

if arg[1] == 'call' then
  local msg = utils.rpcd_readline()
  msg = json.parse(msg)
  if   arg[2] == 'status'										then status(msg)
  elseif   arg[2] == 'enable'								then enable(msg)
  elseif   arg[2] == 'disable'							then disable(msg)
  elseif   arg[2] == 'show_url'	            then show_url(msg)
  elseif   arg[2] == 'change_url'	        	then change_url(msg)
  elseif   arg[2] == 'list_vouchers'	    	then list_vouchers(msg)
  elseif   arg[2] == 'add_vouchers'	        then add_vouchers(msg)
  elseif   arg[2] == 'invalidate_voucher'	        then invalidate_voucher(msg)
  elseif   arg[2] == 'rename'	        then rename(msg)
  else     utils.printJson({ error = "Method not found" })
  end
end

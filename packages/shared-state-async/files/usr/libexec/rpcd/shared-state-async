--[[
Shared State Async

Copyright (c) 2024  Javier Jorge <jjorge@inti.gob.ar>
Copyright (c) 2024  Instituto Nacional de Tecnolog..a Industrial
Copyright (C) 2024  Asociacion Civil Altermundi <info@altermundi.net>

This is free software, licensed under the GNU AFFERO GENERAL PUBLIC LICENSE Version 3
]]
--
local utils = require('lime.utils')
local json = require 'luci.jsonc'

local function parseoutput(output)
    --filer possible debugging meesages
    local response = output:match('{.*}')
    if response ~= nil then
        --make sure it is a json
        local msg = json.parse(response)
        if (msg) then
            utils.printJson(msg)
        end
    end
    utils.printJson({
        output = output
    })
end

local function get(msg)
    local output = utils.unsafe_shell("shared-state-async get " ..
        msg.data_type .. " 2>&1 ")
    parseoutput(output)
end

local function sync(msg)
    local output = nil
    if (type(msg.peers_ip) == 'table') then
        output = utils.unsafe_shell("shared-state-async sync " ..
            msg.data_type .. " " .. table.concat(msg.peers_ip, " ") .. " 2>&1 ")
    else
        output = utils.unsafe_shell("shared-state-async sync " ..
            msg.data_type .. " 2>&1 ")
    end
    if output then
        utils.printJson({
            output = output
        })
    end
end

--{"data_type":"data","peers_ip":["10.0.0.1","10.0.0.2"]}
--{"data_type":"data","peers_ip":["10.0.0.1"]}
local methods = {
    get = {
        data_type = 'value'
    },
    sync = {
        data_type = 'value',
        peers_ip = 'value'
    }
}

if arg[1] == 'list' then
    utils.printJson(methods)
end

if arg[1] == 'call' then
    utils.unsafe_shell("rm " .. ERROR_LOG_FILE_NAME .. "> /dev/null 2>&1")
    local msg = utils.rpcd_readline()
    msg = json.parse(msg)
    if arg[2] == 'get' then
        get(msg)
    elseif arg[2] == 'sync' then
        sync(msg)
    else
        utils.printJson({
            error = "Method not found"
        })
    end
end

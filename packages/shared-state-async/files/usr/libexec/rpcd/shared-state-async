#!/usr/bin/env lua
--[[
Shared State

Copyright (c) 2023  Javier Jorge <jjorge@inti.gob.ar>
Copyright (c) 2023  Instituto Nacional de Tecnolog..a Industrial
Copyright (C) 2023  Asociaci..n Civil Altermundi <info@altermundi.net>

This is free software, licensed under the GNU AFFERO GENERAL PUBLIC LICENSE Version 3
]]
--
local utils = require('lime.utils')
local json = require 'luci.jsonc'

require("nixio.util")

local function getFromSharedState(msg)
    print(utils.unsafe_shell("shared-state-async get " .. msg.data_type .. " 2> /tmp/errlor.log"))
    --if ther are any the function wont print.
end

local function sync(msg)
    --{"data_type":"data","peers_ip":["10.0.0.1","10.0.0.2"]}
    --{"data_type":"data","peers_ip":["10.0.0.1"]}
    local ret = " nada "
    if (type(msg.peers_ip) == 'table') then
        ret = utils.unsafe_shell("shared-state-async sync " ..
            msg.data_type .. " " .. table.concat(msg.peers_ip, " ") .. " 2> /tmp/errlor.log")
    else
        ret = utils.unsafe_shell("shared-state-async sync " .. msg.data_type .. " " .. " 2> /tmp/errlor.log")
    end
    utils.printJson({
        status = ret ..
            "shared-state-async sync " ..
            msg.data_type .. " " ..  " 2> /tmp/errlor.log"
    })
end

local methods = {
    getFromSharedState = {
        data_type = 'value'
    },
    sync = {
        data_type = 'value',
        peers_ip = 'value'
    }
}

if arg[1] == 'list' then
    utils.printJson(methods)
end

if arg[1] == 'call' then
    local msg = utils.rpcd_readline()
    msg = json.parse(msg)
    if arg[2] == 'getFromSharedState' then
        getFromSharedState(msg)
    elseif arg[2] == 'sync' then
        sync(msg)
    else
        utils.printJson({
            error = "Method not found"
        })
    end
end
